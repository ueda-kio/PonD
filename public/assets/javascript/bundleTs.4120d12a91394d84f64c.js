(function(){"use strict";var __webpack_modules__={904:function(){eval("\n;// CONCATENATED MODULE: ./src/ts/_init.ts\n/**\n * ! IEで動作しないシンタックスを利用しないこと\n * @see common\\_inc\\_head-script.ejs\n */\nvar html = document.documentElement;\nvar init = function init() {\n  if (html && html.nodeType === Node.ELEMENT_NODE) {\n    // JS有効時のセレクタとして利用するカスタムdata属性を付与\n    html.dataset.scriptEnabled = 'true'; // Trident (IE) 判定\n\n    if ('uniqueID' in document) {\n      html.dataset.browserTrident = 'true';\n    }\n  } // document.querySelectorAll('*[tabindex=\"-1\"]').forEach((el) => {\n  //   el.setAttribute('aria-disabled', 'true');\n  // });\n\n};\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_scrollManage.ts\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _document = document,\n    _scrollManage_html = _document.documentElement,\n    body = _document.body;\nvar ScrollManage = /*#__PURE__*/function () {\n  function ScrollManage() {\n    _classCallCheck(this, ScrollManage);\n\n    _defineProperty(this, \"smoothScrollTo\", function () {\n      return function (_range) {\n        var range = Math.floor(_range); // 画面の拡大縮小に伴う小数点の回避\n\n        var callback = function callback(resolve) {\n          var stop = function stop() {\n            window.scroll({\n              top: window.pageYOffset + 1,\n              behavior: 'smooth'\n            });\n          };\n\n          var keydown = function keydown(e) {\n            if (e && (/Arrow/.test(e.key) || [// for IE\n            'Up', 'Right', 'Down', 'Left'].some(function (item) {\n              return item === e.key;\n            }))) {\n              stop();\n            }\n          };\n\n          var once = {\n            once: true\n          };\n\n          if (range === Math.floor(window.pageYOffset)) {\n            resolve();\n            return;\n          }\n\n          window.addEventListener('keydown', keydown, once);\n          window.addEventListener('wheel', stop, once);\n          window.addEventListener('scrollend', function () {\n            resolve(true);\n            window.removeEventListener('keydown', keydown, once);\n            window.removeEventListener('wheel', stop, once);\n          }, once);\n        };\n\n        window.scroll({\n          top: range,\n          behavior: 'smooth'\n        });\n        return new Promise(callback);\n      };\n    }());\n\n    _defineProperty(this, \"scrollLock\", function () {\n      var scrollbar = 0;\n      var count = 0;\n\n      var init = function init() {\n        if (_scrollManage_html.getAttribute('data-scroll-disabled') === 'true') {\n          return;\n        }\n\n        scrollbar = body.clientWidth;\n        body.style.overflow = 'hidden';\n        scrollbar = Math.abs(body.clientWidth - scrollbar);\n        body.style.overflow = '';\n      };\n\n      var handler = function handler(e) {\n        e.preventDefault();\n      };\n      /**\n       *@summary 矢印キーでのスクロールを停止\n      * @param {KeyboardEvent} e\n      */\n\n\n      var handlerArrow = function handlerArrow(e) {\n        if (e && (/Arrow/.test(e.key) || [// for IE\n        'Up', 'Down'].some(function (item) {\n          return item === e.key;\n        }))) {\n          handler(e);\n        }\n      };\n\n      var option = {\n        passive: false\n      };\n      window.addEventListener('load', init);\n      window.addEventListener('windowresized', init);\n      return function (bool) {\n        if (bool === true) {\n          count++;\n\n          if (_scrollManage_html.getAttribute('data-scroll-disabled') === 'true') {\n            return;\n          } // body.style.paddingRight = `${scrollbar}px`;\n\n\n          _scrollManage_html.setAttribute('data-scroll-disabled', 'true');\n          window.addEventListener('touchmove', handler, option);\n          window.addEventListener('mousewheel', handler, option);\n          window.addEventListener('keydown', handlerArrow);\n          return;\n        } else if (bool === false) {\n          count--;\n\n          if (_scrollManage_html.getAttribute('data-scroll-disabled') !== 'true' || count > 0) {\n            return;\n          }\n\n          _scrollManage_html.setAttribute('data-scroll-disabled', 'false'); // body.style.paddingRight = '';\n\n          window.removeEventListener('touchmove', handler, option);\n          window.removeEventListener('mousewheel', handler, option);\n          window.removeEventListener('keydown', handlerArrow);\n          return;\n        }\n\n        throw new TypeError('Argument is must be boolean, and required.');\n      };\n    }());\n  }\n\n  _createClass(ScrollManage, [{\n    key: \"deepFreeze\",\n    value:\n    /**\n     * 再帰的な凍結\n     * @param obj - 凍結させたいオブジェクト\n     * @returns - 渡されたオブジェクト\n     */\n    function deepFreeze(obj) {\n      Object.freeze(obj);\n\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var item = obj[key];\n\n          if (_typeof(item) === 'object' && item !== null && !Object.isFrozen(item)) {\n            this.deepFreeze(item);\n          }\n        }\n      }\n\n      return obj;\n    }\n    /**\n     * スクロール量を渡すとその位置までスムーススクロールを実施する\n     * スムーススクロール中にホイールや方向キー入力を検知するとスクロールを中断し、rejectする\n     * @param _range スクロールする先\n     * @returns Promise object.\n     */\n\n  }], [{\n    key: \"instance\",\n    get: function get() {\n      if (!this._instance) {\n        this._instance = new ScrollManage();\n      }\n\n      return this._instance;\n    }\n  }]);\n\n  return ScrollManage;\n}();\n\n_defineProperty(ScrollManage, \"_instance\", void 0);\n\nvar scrollManage = ScrollManage.instance;\n/* harmony default export */ var _scrollManage = (scrollManage.deepFreeze(scrollManage));\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_Modal.ts\nfunction _Modal_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _Modal_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _Modal_createClass(Constructor, protoProps, staticProps) { if (protoProps) _Modal_defineProperties(Constructor.prototype, protoProps); if (staticProps) _Modal_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _Modal_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import { toggleScrollStop } from '../_scroll-stop'\n\n\nvar Modal = /*#__PURE__*/function () {\n  function Modal(elem) {\n    var _this = this;\n\n    _Modal_classCallCheck(this, Modal);\n\n    _Modal_defineProperty(this, \"_isOpen\", void 0);\n\n    _Modal_defineProperty(this, \"html\", void 0);\n\n    _Modal_defineProperty(this, \"root\", void 0);\n\n    _Modal_defineProperty(this, \"clickedOpener\", null);\n\n    _Modal_defineProperty(this, \"handler\", {\n      focusManager: {\n        /**\n         * @summary モーダル自身にフォーカスをあてる\n         */\n        open: function open() {\n          _this.root.focus();\n        },\n\n        /**\n         * @summary トリガーにフォーカスを戻す\n         */\n        close: function close() {\n          if (_this.clickedOpener) {\n            _this.clickedOpener.focus();\n          }\n        }\n      },\n      openClick: function openClick(e) {\n        _this.openModal(e);\n      },\n      openKeydown: function openKeydown(e) {\n        if (e.key === ' ' || e.key === 'Spacebar') {\n          _this.openModal(e);\n        }\n      },\n      closeClick: function closeClick() {\n        _this.closeModal();\n      },\n      closeKeydown: function closeKeydown(e) {\n        if (e.key === 'Escape' || e.key === 'Esc') {\n          _this.closeModal();\n        }\n      }\n    });\n\n    this._isOpen = false;\n    this.html = document.documentElement;\n    this.root = elem;\n    var openers = document.querySelectorAll(\"[data-dialog-trigger=\\\"\".concat(this.root.id, \"\\\"]\"));\n    var closers = this.root.querySelectorAll('.js-modal-closer');\n\n    var setModal = function setModal() {\n      _this.root.setAttribute('role', 'dialog');\n\n      _this.root.setAttribute('aria-modal', 'true');\n\n      _this.root.setAttribute('tabindex', '-1');\n\n      _this.root.hidden = true;\n\n      _this.root.addEventListener('click', function (e) {\n        e.stopPropagation();\n      });\n\n      var handler = function handler(e) {\n        if (e && e.key === ' ' || e.key === 'Space') {\n          e.preventDefault();\n        }\n      };\n\n      _this.root.addEventListener('focus', function () {\n        window.addEventListener('keydown', handler);\n      });\n\n      _this.root.addEventListener('blur', function () {\n        window.removeEventListener('keydown', handler);\n      });\n    };\n\n    var setOpener = function setOpener() {\n      if (openers) {\n        openers.forEach(function (opener) {\n          if (opener.tagName !== 'BUTTON') {\n            opener.setAttribute('role', 'button');\n          }\n\n          if (opener.tagName === 'A') {\n            opener.href = \"#\".concat(_this.root.id);\n          }\n\n          opener.setAttribute('aria-controls', \"\".concat(_this.root.id));\n          opener.setAttribute('aria-haspopup', 'dialog');\n          opener.addEventListener('click', function (e) {\n            _this.handler.openClick(e);\n\n            _this.clickedOpener = e.currentTarget;\n          });\n\n          if (opener.tagName === 'A') {\n            opener.addEventListener('keydown', function (e) {\n              _this.handler.openKeydown(e);\n\n              _this.clickedOpener = e.currentTarget;\n            });\n          }\n        });\n      }\n    };\n\n    var setCloser = function setCloser() {\n      if (closers) {\n        closers.forEach(function (closer) {\n          closer.addEventListener('click', function () {\n            if (_this._isOpen) {\n              console.log('btn');\n\n              _this.handler.closeClick();\n            }\n          });\n        });\n      } // Escボタンで閉じる処理\n\n\n      window.addEventListener('keydown', function (e) {\n        if (_this._isOpen) {\n          _this.handler.closeKeydown(e);\n        }\n      });\n    };\n\n    var init = function init() {\n      setModal();\n      setOpener();\n      setCloser();\n    };\n\n    init();\n  }\n  /**\n   * @summary モーダルを開く\n   * @param {Event} e クリックイベント、キーボードイベント\n   */\n\n\n  _Modal_createClass(Modal, [{\n    key: \"openModal\",\n    value: function openModal(e) {\n      this._isOpen = true;\n      e.preventDefault();\n      e.stopPropagation();\n      _scrollManage.scrollLock(true);\n      this.root.classList.add('is-show');\n      this.html.classList.add('is-modal');\n      this.root.hidden = false;\n      this.handler.focusManager.open();\n      window.addEventListener('click', this.handler.closeClick);\n    }\n    /**\n     * @summary モーダルを閉じる\n     */\n\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this._isOpen = false;\n      _scrollManage.scrollLock(false);\n      this.root.classList.remove('is-show');\n      this.html.classList.remove('is-modal');\n      this.root.hidden = true;\n      this.handler.focusManager.close();\n      window.removeEventListener('click', this.handler.closeClick);\n    } // 強制的にモーダルを開く処理\n\n  }, {\n    key: \"forceOpenModal\",\n    value: function forceOpenModal(event) {\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this._isOpen = true;\n      _scrollManage.scrollLock(true);\n      this.root.classList.add('is-show');\n      this.html.classList.add('is-modal');\n      this.root.hidden = false;\n      this.handler.focusManager.open();\n      window.addEventListener('click', this.handler.closeClick);\n    }\n  }]);\n\n  return Modal;\n}();\n/**\n * 渡されたidのモーダルを開く\n * @param {string} id モーダルのid\n * @param {?Event} event\n */\n\n\nvar forceOpenModal = function forceOpenModal(id, event) {\n  var modal = document.getElementById(id);\n\n  if (modal) {\n    new Modal(modal).forceOpenModal(event);\n  }\n};\n\ndocument.querySelectorAll('.js-modal').forEach(function (el) {\n  new Modal(el);\n});\n\n;// CONCATENATED MODULE: ./src/ts/modules/_htmlspecialchars.ts\n/**\n *@summary 文字列から特殊文字をエスケープする（主にユーザーから入力された文字列などに使用）\n * @param {string} str エスケープする文字列\n * @returns {string}\n */\nvar htmlspecialchars = function htmlspecialchars(str) {\n  return \"\".concat(str).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n;// CONCATENATED MODULE: ./src/ts/modules/_submitContact.ts\n\n\nvar submitContact = function submitContact(_form) {\n  var form = _form;\n  var type = '';\n  var name = '';\n  var companyName = '';\n  var email = '';\n  var detail = '';\n  var adv = '';\n\n  var getValues = function getValues(form) {\n    var inputs = form.querySelectorAll('input, textarea, select');\n    inputs.forEach(function (input) {\n      switch (true) {\n        case input.type === 'radio':\n          {\n            switch (true) {\n              case input.value === 'radio01':\n                type = 'お仕事のご依頼・ご相談';\n                break;\n\n              case input.value === 'radio02':\n                type = 'お見積りのご依頼';\n                break;\n\n              case input.value === 'radio03':\n                type = '採用について';\n                break;\n\n              case input.value === 'radio04':\n                type = 'その他';\n                break;\n            }\n\n            break;\n          }\n\n        case input.name === 'name':\n          name = htmlspecialchars(input.value);\n          break;\n\n        case input.name === 'companyName':\n          companyName = htmlspecialchars(input.value);\n          break;\n\n        case input.name === 'email':\n          email = htmlspecialchars(input.value);\n          break;\n\n        case input.name === 'detail':\n          detail = htmlspecialchars(input.value);\n          break;\n\n        case input.name === 'adv':\n          switch (true) {\n            case input.value === 'search':\n              adv = 'Google/Yahoo検索';\n              break;\n\n            case input.value === 'sns':\n              adv = 'SNS';\n              break;\n\n            case input.value === 'friends':\n              adv = '友人や知人';\n              break;\n\n            case input.value === 'blog':\n              adv = 'ブログ';\n              break;\n\n            case input.value === 'other':\n              adv = 'その他';\n              break;\n          }\n\n          break;\n      }\n    });\n  };\n\n  var fetchValues = function fetchValues() {\n    var submitBtn = document.getElementById('submit');\n    var url = 'hogehoge';\n    var payload = {\n      text: \"\\n      \\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u304C\\u3042\\u308A\\u307E\\u3057\\u305F\\u3002\\n      PON DESIGN\\u3092\\u3069\\u3061\\u3089\\u3067\\u304A\\u77E5\\u308A\\u306B\\u306A\\u308A\\u307E\\u3057\\u305F\\u304B\\uFF1F\\uFF1A\".concat(adv, \"\\n      \\u304A\\u554F\\u5408\\u305B\\u7A2E\\u5225\\uFF1A\").concat(type, \"\\n      \\u304A\\u540D\\u524D\\uFF1A\").concat(name, \"\\n      \\u4F1A\\u793E\\u540D\\uFF1A\").concat(companyName || '記入なし', \"\\n      \\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\uFF1A\").concat(email, \"\\n      \\u3010\\u304A\\u554F\\u5408\\u305B\\u5185\\u5BB9\\u3011\\n      \").concat(detail, \"\\n      \").replace(/^\\n|\\s+$|^ {4}/gm, '')\n    };\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    }).then(function () {\n      submitBtn.disabled = true;\n      forceOpenModal('success-submit-modal');\n    });\n  };\n\n  var init = function init() {\n    getValues(form);\n    fetchValues();\n  };\n\n  init();\n};\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_FormValidation.ts\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _FormValidation_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _FormValidation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nvar Validation = function Validation(form) {\n  var _this = this;\n\n  _FormValidation_classCallCheck(this, Validation);\n\n  _FormValidation_defineProperty(this, \"form\", void 0);\n\n  _FormValidation_defineProperty(this, \"isInvalid\", new Map());\n\n  _FormValidation_defineProperty(this, \"inputs\", void 0);\n\n  _FormValidation_defineProperty(this, \"validate\", {\n    /**\n     * 文字数が足りているか\n     * @param _input 対象のテキストフィールド\n     * @returns エラーメッセージ\n     */\n    minLength: function minLength(_input) {\n      if (_input.getAttribute('minLength') === null) return '';\n      var minlength = Number(_input.getAttribute('minlength'));\n      return minlength <= _input.value.trim().length ? '' : \"\".concat(minlength, \"\\u6587\\u5B57\\u4EE5\\u4E0A\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n    },\n\n    /**\n     * 文字数が超えていないか\n     * @param _input 対象のテキストフィールド\n     * @returns エラーメッセージ\n     */\n    maxLength: function maxLength(_input) {\n      if (!_input.getAttribute('maxLength')) {\n        return '';\n      }\n\n      var input = _input;\n      return input.value.trim().length <= input.maxLength ? '' : \"\".concat(input.maxLength, \"\\u6587\\u5B57\\u4EE5\\u4E0B\\u3067\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n    },\n\n    /**\n     * 必須項目が入力されているか\n     * @param _formControls 対象のフォームコントロール\n     * @returns エラーメッセージ\n     */\n    required: function required(_formControls) {\n      if (!_formControls.required) {\n        return '';\n      }\n\n      var input = _formControls;\n\n      if (input.type === 'checkbox') {\n        return input.checked ? '' : 'このフィールドは入力必須です。';\n      } else if (input.type === 'radio') {\n        var isChecked = _this.form.querySelectorAll(\"input[type=\\\"radio\\\"][name=\\\"\".concat(input.name, \"\\\"]:checked\")).length !== 0;\n        return isChecked ? '' : 'このフィールドは入力必須です。';\n      }\n\n      if (input.value.trim() === '') {\n        //TODO dataset変更する\n        if (input.dataset.errorMessage) {\n          return input.dataset.errorMessage;\n        }\n\n        return 'このフィールドは入力必須です。';\n      }\n\n      return '';\n    },\n\n    /**\n     * pattern属性のルールに適合しているか\n     * @param _input 対象のテキストフィールド\n     * @returns エラーメッセージ\n     */\n    pattern: function pattern(_input) {\n      if (!_input.getAttribute('pattern') || !_input.required) {\n        return '';\n      }\n\n      var input = _input; // pattern属性を許容させる\n\n      var pattern = new RegExp(input.pattern);\n\n      if (pattern.test(input.value)) {\n        return '';\n      } // title属性に説明があればそれを出力する\n\n\n      return input.title || '指定されている形式で入力してください。';\n    }\n  });\n\n  this.form = form; // this.isInvalid = new Map();\n\n  this.inputs = form.querySelectorAll('input, textarea, select');\n  /**\n   * 出力するエラーメッセージのマークアップを作る\n   * @param messages エラーメッセージリスト\n   * @returns エラーメッセージ\n   */\n\n  var result = function result(messages) {\n    var arr = [];\n\n    var _iterator = _createForOfIteratorHelper(messages),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var msg = _step.value;\n\n        if (msg) {\n          arr.push(msg);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return arr.join('<br>');\n  };\n  /**\n   * errorIdの取得\n   * @param input 対象のテキストフィールド\n   * @returns エラーメッセージ\n   */\n\n\n  var getErrorId = function getErrorId(input) {\n    var errorId = input.dataset.radioGroupError;\n\n    if (!errorId) {\n      if (input.dataset.errorId) {\n        errorId = \"\".concat(input.dataset.errorId, \"-error\");\n      } else {\n        errorId = \"\".concat(input.id, \"-error\");\n      }\n    }\n\n    return errorId;\n  };\n  /**\n   * error状態の解除\n   * @param input 対象のテキストフィールド\n   * @returns {void}\n   */\n\n\n  var resetInputErrorState = function resetInputErrorState(input) {\n    var type = input.type;\n    var inputElms = type === 'radio' ? form.querySelectorAll(\"input[type=\\\"radio\\\"][name=\\\"\".concat(input.name, \"\\\"]\")) : [input];\n    var errorId = getErrorId(input);\n    var error = document.getElementById(errorId);\n    var labels = document.querySelectorAll(\"[for=\\\"\".concat(input.id, \"\\\"]\"));\n\n    if (error) {\n      error.textContent = '';\n    }\n\n    inputElms.forEach(function (input) {\n      input.classList.remove('is-error');\n    });\n    labels.forEach(function (label) {\n      label.classList.remove('is-error');\n    });\n\n    if (input.dataset.errorId) {\n      var label = document.getElementById(input.dataset.errorId);\n\n      if (label) {\n        label.classList.remove('is-error');\n      }\n    }\n  };\n\n  var getHandler = function getHandler(input) {\n    var errorId = getErrorId(input);\n    var error = document.getElementById(errorId);\n    var labels = document.querySelectorAll(\"[for=\\\"\".concat(input.id, \"\\\"]\"));\n    var isValid = true;\n    var errorMessage = result([_this.validate.minLength(input), _this.validate.maxLength(input), _this.validate.required(input), _this.validate.pattern(input)]);\n\n    if (isValid) {\n      isValid = errorMessage === '';\n    } // 対象のフォームコントロールの入力値が妥当かどうかは\n    // error文言があるかどうかを判定してMapに格納する\n\n\n    if (!isValid) {\n      _this.isInvalid.set(input, true);\n\n      input.classList.add('is-error'); // labelに.is-error付与\n\n      labels.forEach(function (label) {\n        label.classList.add('is-error');\n      });\n\n      if (errorMessage) {\n        error.textContent = '';\n        error.insertAdjacentHTML('afterbegin', errorMessage);\n      } else {\n        // errorMessageが空で、isValidがfalseの時は、他に不正な入力項目があるケース\n        _this.isInvalid.set(input, false);\n\n        input.classList.remove('is-error');\n      }\n    } else {\n      _this.isInvalid.set(input, false);\n\n      resetInputErrorState(input);\n    }\n  };\n  /**\n   * イベントリスナのバインド\n   */\n\n\n  var addEvents = function addEvents() {\n    var submit = document.getElementById('submit');\n\n    _this.inputs.forEach(function (input) {\n      input.addEventListener('input', function (e) {\n        getHandler(e.currentTarget);\n      });\n    });\n\n    submit.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      _this.inputs.forEach(function (input) {\n        getHandler(input);\n      });\n\n      var _iterator2 = _createForOfIteratorHelper(_this.isInvalid),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              input = _step2$value[0],\n              state = _step2$value[1];\n\n          if (state) {\n            input.focus();\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      submitContact(_this.form);\n    });\n  };\n  /**\n   * 初期化\n   */\n\n\n  var init = function init() {\n    // form.noValidate = true;\n    addEvents();\n  };\n\n  init();\n};\ndocument.querySelectorAll('.js-form-validate').forEach(function (el) {\n  new Validation(el);\n});\n;// CONCATENATED MODULE: ./src/ts/modules/utils/constants.ts\n/**\n * 共通定数\n *\n * @summary 様々な場面でよく使う定数の宣言\n */\n\n/** IEを考慮したdocument.scrollingElementのフォールバック */\nvar SCROLL_ELEM = document.scrollingElement ||\n/* IE */\ndocument.documentElement;\n/** aria-disabled属性を設定可能な要素（適宜変更する） */\n\nvar ARIA_DISABLED_ELEMS = 'a[href], area[href], [aria-controls], [role=\"button\"], [role=\"tab\"]';\n/** disabled属性を設定可能な要素 */\n\nvar DISABLED_ELEMS = 'button, fieldset, input, link[rel=\"stylesheet\"], option, optgroup, select, textarea';\n/** JavaScriptの.focus()でフォーカス可能な要素 */\n\nvar FOCUSABLE_ELEMS = 'a[href], area[href], [tabindex], button, input, select, textarea, iframe, object, audio, video, embed, summary';\n/** Tabキー操作でフォーカス可能な要素 */\n\nvar TABBABLE_ELEMS = 'a[href]:not([aria-disabled=\"true\"]), area[href]:not([aria-disabled=\"true\"]), [tabindex]:not([aria-disabled=\"true\"]), button:not(:disabled), input:not(:disabled), select:not(:disabled), option:not(:disabled), optgroup:not(:disabled), textarea:not(:disabled), iframe, object, audio, video, embed, summary';\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_FocusLoop.ts\nfunction _FocusLoop_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\nvar FocusLoop = function FocusLoop(elm) {\n  _FocusLoop_classCallCheck(this, FocusLoop);\n\n  var root = elm;\n  var focusElmList = Array.from(root.querySelectorAll(TABBABLE_ELEMS));\n\n  if (focusElmList) {\n    var firstElm = focusElmList[0];\n    var lastElm = focusElmList.slice(-1)[0]; // focusElmListの最後の要素\n\n    /**\n     * 最初の要素にフォーカスをあてる\n     * @param {Event} e キーイベント\n     * @returns {void}\n     */\n\n    var backFocusToFirst = function backFocusToFirst(e) {\n      if (e.shiftKey && e.key === 'Tab') {\n        return false;\n      } else if (e.key === 'Tab') {\n        firstElm.focus();\n        e.preventDefault();\n      }\n    };\n    /**\n     * 最後の要素にフォーカスをあてる\n     * @param {Event} e キーイベント\n     * @returns {void}\n     */\n\n\n    var backFocusToLast = function backFocusToLast(e) {\n      if (e.shiftKey && e.key === 'Tab') {\n        lastElm.focus();\n        e.preventDefault();\n      } else if (e.key === 'Tab') {\n        return false;\n      }\n    };\n\n    var init = function init() {\n      firstElm.addEventListener('keydown', function (e) {\n        backFocusToLast(e);\n      });\n      lastElm.addEventListener('keydown', function (e) {\n        backFocusToFirst(e);\n      });\n    };\n\n    init();\n  }\n};\ndocument.querySelectorAll('.js-focus-loop').forEach(function (el) {\n  new FocusLoop(el);\n});\n;// CONCATENATED MODULE: ./src/ts/modules/_globalMenu.ts\n // import { toggleScrollStop } from \"./_scroll-stop\";\n\nvar GlobalMenu = function GlobalMenu() {\n  var html = document.documentElement;\n  var trigger = document.querySelector('.js-menuTrigger');\n  var globalMenu = document.querySelector('.p-globalMenu');\n  /**\n   * @param {}\n   */\n\n  var toggleMenu = function toggleMenu() {\n    var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (el) {\n      el.classList.toggle('is-open');\n      globalMenu.classList.toggle('is-open');\n\n      if (!html.getAttribute('data-scroll-disabled') || html.getAttribute('data-scroll-disabled') === 'false') {\n        el.setAttribute('aria-expanded', 'true');\n        globalMenu.hidden = false;\n        _scrollManage.scrollLock(true);\n      } else {\n        el.setAttribute('aria-expanded', 'false');\n        globalMenu.hidden = true;\n        _scrollManage.scrollLock(false);\n      }\n    }\n  };\n\n  var addEvents = function addEvents() {\n    if (trigger) {\n      trigger.addEventListener('click', function (e) {\n        toggleMenu(e.currentTarget);\n      });\n      trigger.addEventListener('keydown', function (e) {\n        if (e.key === 'Enter') {\n          toggleMenu(e.currentTarget);\n        } else {\n          return false;\n        }\n\n        toggleMenu(e.currentTarget);\n      });\n    }\n\n    document.querySelectorAll('.p-globalMenu__link > a').forEach(function (link) {\n      link.addEventListener('keydown', function (e) {\n        if (e.key === ' ' || e.key === 'Space') {\n          e.preventDefault();\n          location.href = \"\".concat(link.href);\n        }\n      });\n    });\n  };\n\n  addEvents();\n};\n;// CONCATENATED MODULE: ./src/ts/modules/_l-header-styleChange.ts\nvar headerStyleChanger = function headerStyleChanger() {\n  var toggleHeaderActive = function toggleHeaderActive() {\n    var scrollHeight = window.pageYOffset;\n    var header = document.querySelectorAll('.p-header, .p-header--home')[0];\n    var headerTop = document.querySelector('.p-header__top');\n\n    if (header && headerTop) {\n      if (scrollHeight > header.clientHeight - 40 && !headerTop.classList.contains('is-active')) {\n        headerTop.classList.add('is-active');\n      } else if (scrollHeight <= header.clientHeight && headerTop.classList.contains('is-active')) {\n        headerTop.classList.remove('is-active');\n      }\n    }\n  };\n\n  var toggleHeaderPadding = function toggleHeaderPadding() {\n    var scrollHeight = window.pageYOffset;\n    var headerTop = document.querySelector('.p-header__top');\n    var menu = document.querySelector('.p-hamburgerMenu');\n\n    if (headerTop && menu) {\n      if (scrollHeight !== 0 && !headerTop.classList.contains('is-moved')) {\n        headerTop.classList.add('is-moved');\n        menu.classList.add('is-moved');\n      } else if (scrollHeight === 0 && headerTop.classList.contains('is-moved')) {\n        headerTop.classList.remove('is-moved');\n        menu.classList.remove('is-moved');\n      }\n    }\n  };\n\n  window.addEventListener('scroll', function () {\n    toggleHeaderActive();\n    toggleHeaderPadding();\n  });\n};\n;// CONCATENATED MODULE: ./src/ts/modules/_btnPressToDisabled.ts\n\n/**\n * ボタンを押した後に非活性状態にする機能\n *\n * @summary 専用のクラスを持つボタン（a要素やbutton要素）を押下した後に非活性状態にする機能です。\n * @returns {void}\n */\n\nvar btnPressToDisabled = function btnPressToDisabled() {\n  /**\n   * 要素が非活性状態か確認する\n   *\n   * @param {HTMLElement} elem - 確認対象の要素\n   * @returns {boolean} 非活性状態かの判定結果\n   */\n  var isDisabled = function isDisabled(elem) {\n    if (elem.matches(DISABLED_ELEMS) && elem.disabled) {\n      return true;\n    } else if (elem.matches(ARIA_DISABLED_ELEMS) && elem.getAttribute('aria-disabled') === 'true') {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * 非活性を設定\n   *\n   * @param {HTMLElement} elem - 対象の要素\n   * @returns {HTMLElement} elem - 対象の要素\n   */\n\n\n  var addDisabled = function addDisabled(elem) {\n    if (elem.matches(DISABLED_ELEMS)) {\n      elem.disabled = true;\n    } else if (elem.matches(ARIA_DISABLED_ELEMS)) {\n      elem.setAttribute('aria-disabled', 'true');\n      elem.tabIndex = -1;\n    }\n\n    return elem;\n  };\n\n  var toDisable = function toDisable() {\n    document.querySelectorAll('.js-btn-press-to-disabled').forEach(function (btn) {\n      if (btn) {\n        btn.addEventListener('click', function (e) {\n          if (isDisabled(e.currentTarget)) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n          }\n\n          addDisabled(e.currentTarget);\n        });\n      }\n    });\n  };\n\n  toDisable();\n};\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_Modal-module.ts\nfunction _Modal_module_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _Modal_module_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _Modal_module_createClass(Constructor, protoProps, staticProps) { if (protoProps) _Modal_module_defineProperties(Constructor.prototype, protoProps); if (staticProps) _Modal_module_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _Modal_module_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar targetSelector = 'data-modal-content';\nvar triggerSelector = 'data-modal-trigger';\nvar closeBtnSelector = 'data-modal-close';\n\nvar _Modal_module_Modal = /*#__PURE__*/function () {\n  function Modal(modal) {\n    var _this = this;\n\n    _Modal_module_classCallCheck(this, Modal);\n\n    _Modal_module_defineProperty(this, \"modal\", void 0);\n\n    _Modal_module_defineProperty(this, \"triggerElms\", void 0);\n\n    _Modal_module_defineProperty(this, \"closeBtns\", void 0);\n\n    _Modal_module_defineProperty(this, \"transitionTime\", 500);\n\n    _Modal_module_defineProperty(this, \"activeTrigger\", void 0);\n\n    _Modal_module_defineProperty(this, \"closeTypeEsc\", function (e) {\n      if (e.key === 'Escape' || e.key === 'Esc') {\n        _this.closeModal();\n      }\n    });\n\n    this.modal = modal;\n  }\n\n  _Modal_module_createClass(Modal, [{\n    key: \"setContentElms\",\n    value: function setContentElms(triggerElms, closeBtns) {\n      this.triggerElms = triggerElms;\n      this.closeBtns = closeBtns;\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig() {\n      var _this2 = this;\n\n      var transitionTime = this.modal.getAttribute('data-modal-transition');\n      var extractedNumber = transitionTime === null || transitionTime === void 0 ? void 0 : transitionTime.match(/[0-9]/g);\n\n      if (typeof extractedNumber !== 'undefined' && extractedNumber !== null) {\n        this.transitionTime = Number(extractedNumber.join(''));\n      }\n\n      this.modal.style.setProperty('--transition-time', \"\".concat(this.transitionTime, \"ms\"));\n      var isOpen = this.modal.getAttribute('aria-hidden') === 'false' ? true : false;\n      this.triggerElms.forEach(function (trigger) {\n        trigger.setAttribute('aria-controls', \"\".concat(_this2.modal.id));\n        isOpen ? trigger.setAttribute('aria-expanded', 'true') : trigger.setAttribute('aria-expanded', 'false');\n      });\n    }\n  }, {\n    key: \"openModal\",\n    value: function openModal(activeTrigger) {\n      this.activeTrigger = activeTrigger;\n      if (typeof this.activeTrigger !== 'undefined') this.activeTrigger.setAttribute('aria-expanded', 'true');\n      this.modal.setAttribute('aria-hidden', 'false');\n      this.modal.focus();\n      document.body.classList.add('is-scrollLock');\n      window.addEventListener('keydown', this.closeTypeEsc);\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.modal.setAttribute('aria-hidden', 'true');\n      document.body.classList.remove('is-scrollLock');\n\n      if (typeof this.activeTrigger !== 'undefined') {\n        this.activeTrigger.focus();\n        this.activeTrigger.setAttribute('aria-expanded', 'false');\n      }\n\n      window.removeEventListener('keydown', this.closeTypeEsc);\n    }\n  }, {\n    key: \"addEvent\",\n    value: function addEvent() {\n      var _this3 = this;\n\n      this.triggerElms.forEach(function (triggerElm) {\n        triggerElm.addEventListener('click', function (e) {\n          _this3.openModal(e.currentTarget);\n        });\n        triggerElm.addEventListener('keydown', function (e) {\n          if (e.key === ' ' || e.key === 'Space') {\n            e.preventDefault();\n            var activeTrigger = e.currentTarget;\n\n            _this3.openModal(activeTrigger);\n          }\n        });\n      });\n      this.closeBtns.forEach(function (closeBtn) {\n        closeBtn.addEventListener('click', function () {\n          _this3.closeModal();\n        });\n        closeBtn.addEventListener('keydown', function (e) {\n          if (e.key === ' ' || e.key === 'Space') {\n            e.preventDefault();\n\n            _this3.closeModal();\n          }\n        });\n      });\n      var overlay = this.modal.querySelector('[data-modal-overlay]');\n\n      if (overlay !== null) {\n        overlay.addEventListener('click', function () {\n          _this3.closeModal();\n        });\n      }\n    }\n  }]);\n\n  return Modal;\n}(); // init\n\n\n(function () {\n  window.addEventListener('DOMContentLoaded', function () {\n    var modalTargets = document.querySelectorAll(\"[\".concat(targetSelector, \"]\"));\n    if (modalTargets.length === 0) return;\n    modalTargets.forEach(function (modalTarget) {\n      var modal = new _Modal_module_Modal(modalTarget);\n      var triggerElms = document.querySelectorAll(\"[\".concat(triggerSelector, \"=\\\"\").concat(modalTarget.id, \"\\\"]\"));\n      var closeBtns = modalTarget.querySelectorAll(\"[\".concat(closeBtnSelector, \"=\\\"\").concat(modalTarget.id, \"\\\"]\"));\n      modal.setContentElms(triggerElms, closeBtns);\n      modal.setConfig();\n      modal.addEvent();\n    });\n  });\n})();\n\nvar modalManage = {\n  /**\n   * 特定のモーダルを開く処理\n   * @param {string} modalId 開きたいモーダルのid\n   * @returns {void}\n   */\n  openModal: function openModal(modalId, triggerElm) {\n    var targetModal = document.getElementById(modalId);\n    if (targetModal === null) return;\n    new _Modal_module_Modal(targetModal).openModal(triggerElm);\n  },\n\n  /**\n   * 特定のモーダルを閉じる処理\n   * @param {string} modalId 閉じたいモーダルのid\n   * @returns {void}\n   */\n  closeModal: function closeModal(modalId) {\n    var targetModal = document.getElementById(modalId);\n    if (targetModal === null) return;\n    new _Modal_module_Modal(targetModal).closeModal();\n  }\n};\n\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_Util-focusLoop.ts\nfunction _Util_focusLoop_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _Util_focusLoop_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _Util_focusLoop_createClass(Constructor, protoProps, staticProps) { if (protoProps) _Util_focusLoop_defineProperties(Constructor.prototype, protoProps); if (staticProps) _Util_focusLoop_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _Util_focusLoop_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n/* harmony default export */ var _Util_focusLoop = ((function () {\n  var targetSelector = '[data-focus-loop]';\n\n  var FocusLoop = /*#__PURE__*/function () {\n    function FocusLoop(target) {\n      var _this = this;\n\n      _Util_focusLoop_classCallCheck(this, FocusLoop);\n\n      _Util_focusLoop_defineProperty(this, \"root\", void 0);\n\n      _Util_focusLoop_defineProperty(this, \"firstElm\", void 0);\n\n      _Util_focusLoop_defineProperty(this, \"lastElm\", void 0);\n\n      _Util_focusLoop_defineProperty(this, \"focusOnFirstElm\", function (e) {\n        if (!e.shiftKey && e.key === 'Tab') {\n          _this.firstElm.focus();\n\n          e.preventDefault();\n        }\n      });\n\n      _Util_focusLoop_defineProperty(this, \"focusOnLastElm\", function (e) {\n        if (e.shiftKey && e.key === 'Tab') {\n          _this.lastElm.focus();\n\n          e.preventDefault();\n        }\n      });\n\n      this.root = target;\n    }\n\n    _Util_focusLoop_createClass(FocusLoop, [{\n      key: \"setBothEndElms\",\n      value: function setBothEndElms(firstElm, lastElm) {\n        this.firstElm = firstElm;\n        this.lastElm = lastElm;\n      }\n      /**\n       * 最初の要素にフォーカスを戻す\n       * @param {KeyboardEvent} e キーイベント\n       * @returns {void}\n       */\n\n    }, {\n      key: \"addEvent\",\n      value: function addEvent() {\n        var _this2 = this;\n\n        this.firstElm.addEventListener('keydown', function (e) {\n          _this2.focusOnLastElm(e);\n        });\n        this.lastElm.addEventListener('keydown', function (e) {\n          _this2.focusOnFirstElm(e);\n        });\n      }\n    }]);\n\n    return FocusLoop;\n  }();\n\n  window.addEventListener('DOMContentLoaded', function () {\n    var targetElms = document.querySelectorAll(targetSelector);\n    if (targetElms.length === 0) return;\n    targetElms.forEach(function (targetElm) {\n      var focusLoop = new FocusLoop(targetElm);\n      var focusElmList = Array.from(targetElm.querySelectorAll(TABBABLE_ELEMS));\n      if (focusElmList.length === 0) return;\n      var firstElm = focusElmList[0];\n      var lastElm = focusElmList.slice(-1)[0]; // focusElmListの最後の要素\n\n      focusLoop.setBothEndElms(firstElm, lastElm);\n      focusLoop.addEvent();\n    });\n  });\n})());\n;// CONCATENATED MODULE: ./src/ts/modules/_modal-swipe-close.ts\nfunction _modal_swipe_close_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _modal_swipe_close_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _modal_swipe_close_createClass(Constructor, protoProps, staticProps) { if (protoProps) _modal_swipe_close_defineProperties(Constructor.prototype, protoProps); if (staticProps) _modal_swipe_close_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _modal_swipe_close_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n/* harmony default export */ var _modal_swipe_close = ((function () {\n  var SwipeCloseModal = /*#__PURE__*/function () {\n    function SwipeCloseModal(modal) {\n      _modal_swipe_close_classCallCheck(this, SwipeCloseModal);\n\n      _modal_swipe_close_defineProperty(this, \"modal\", void 0);\n\n      _modal_swipe_close_defineProperty(this, \"modalInner\", void 0);\n\n      _modal_swipe_close_defineProperty(this, \"modalHeader\", void 0);\n\n      _modal_swipe_close_defineProperty(this, \"startPosition\", 0);\n\n      this.modal = modal;\n    }\n\n    _modal_swipe_close_createClass(SwipeCloseModal, [{\n      key: \"setModalContent\",\n      value: function setModalContent(modalInner, modalHeader) {\n        this.modalInner = modalInner;\n        this.modalHeader = modalHeader;\n      }\n    }, {\n      key: \"setStartPosition\",\n      value: function setStartPosition(startPosition) {\n        this.startPosition = startPosition;\n      }\n    }, {\n      key: \"swipeModal\",\n      value: function swipeModal(fingerPosition) {\n        var movingPosition = this.startPosition - fingerPosition < 0 ? this.startPosition - fingerPosition : 0;\n        this.modalInner.style.setProperty('transition', 'none');\n        this.modalInner.style.transform = \"translateY(\".concat(-1 * movingPosition, \"px)\");\n      }\n    }]);\n\n    return SwipeCloseModal;\n  }();\n\n  window.addEventListener('DOMContentLoaded', function () {\n    var modals = document.querySelectorAll('[data-modal-content]');\n    modals.forEach(function (modal) {\n      var modalInner = modal.querySelector('[data-modal-swipe]');\n      var modalHeader = modal.querySelector('[data-modal-header]');\n      if (modalInner === null || modalHeader === null) return;\n      var swipeCloseModal = new SwipeCloseModal(modal);\n      swipeCloseModal.setModalContent(modalInner, modalHeader);\n      var startPosition = 0;\n      var preTime = 0;\n      var nextTime = 0;\n      var prePosition = 0;\n      var nextPosition = 0;\n      modalHeader.addEventListener('touchstart', function (e) {\n        startPosition = e.changedTouches[0].clientY;\n      });\n      modalHeader.addEventListener('touchmove', function (e) {\n        e.preventDefault();\n        var fingerPosition = e.changedTouches[0].clientY;\n        var movingPosition = fingerPosition - startPosition > 0 ? fingerPosition - startPosition : 0;\n        modalInner.style.setProperty('transition', 'none');\n        modalInner.style.setProperty('transform', \"translateY(\".concat(movingPosition, \"px)\")); // 現在のtimestampと直線のtimestampを格納しておく\n\n        preTime = nextTime;\n        nextTime = e.timeStamp; // 現在のfingerPositionと直線のfingerPositionを格納しておく\n\n        prePosition = nextPosition;\n        nextPosition = fingerPosition;\n      });\n      modalHeader.addEventListener('touchend', function (e) {\n        var endPoint = e.changedTouches[0].clientY;\n        var diff = endPoint - startPosition;\n        modalInner.style.removeProperty('transition');\n        modalInner.style.removeProperty('transform');\n        var limitDistance = 200;\n\n        if (diff > limitDistance) {\n          modalManage.closeModal(\"\".concat(modal.id));\n        }\n\n        if (preTime !== 0 || nextTime !== 0 || prePosition !== 0 || nextPosition !== 0) {\n          // 指が離れた瞬間の差分\n          var dx = nextPosition - prePosition;\n          var dt = nextTime - preTime; // 速度テスト\n\n          console.log(dx / dt);\n          var limitVelocity = 2.5;\n\n          if (dx / dt > limitVelocity) {\n            modalManage.closeModal(\"\".concat(modal.id));\n          }\n        }\n\n        preTime = 0;\n        prePosition = 0;\n      });\n    });\n  });\n})());\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_Disclosure.ts\n/* harmony default export */ var _Disclosure = ((function () {\n  var targetSelector = {\n    details: '[data-disclosure=\"wrapper\"]',\n    summary: '[data-disclosure=\"summary\"]',\n    content: '[data-disclosure=\"content\"]'\n  };\n  window.addEventListener('DOMContentLoaded', function () {\n    var disclosures = document.querySelectorAll(\"\".concat(targetSelector.details));\n    disclosures.forEach(function (disclosure) {\n      var summary = disclosure.querySelector(\"\".concat(targetSelector.summary));\n      var content = disclosure.querySelector(\"\".concat(targetSelector.content));\n      if (summary === null || content === null) return;\n      summary.setAttribute('aria-expanded', 'false');\n      content.setAttribute('aria-hidden', 'true');\n      summary.addEventListener('click', function (e) {\n        e.preventDefault();\n        var self = e.currentTarget;\n        var isOpen = self.getAttribute('aria-expanded');\n\n        var reflow = function reflow(elm) {\n          elm.clientHeight;\n        };\n\n        switch (true) {\n          case isOpen === null:\n            {\n              return;\n            }\n          // 閉じる処理\n\n          case isOpen === 'true':\n            {\n              self.setAttribute('aria-expanded', 'false');\n              self.classList.remove('is-open');\n              content.setAttribute('aria-hidden', 'true');\n              content.style.setProperty('height', \"\".concat(content.scrollHeight, \"px\"));\n              reflow(content);\n              content.style.setProperty('height', '0');\n              content.classList.remove('is-open');\n              content.classList.add('is-hidden');\n              break;\n            }\n          // 開く処理\n\n          case isOpen === 'false':\n            {\n              self.setAttribute('aria-expanded', 'true');\n              self.classList.add('is-open');\n              content.setAttribute('aria-hidden', 'false');\n              var height = content.scrollHeight;\n              content.style.setProperty('height', \"\".concat(height, \"px\"));\n              content.classList.remove('is-hidden');\n              content.classList.add('is-open');\n              break;\n            }\n        }\n      });\n      content.addEventListener('transitionend', function (e) {\n        var self = e.currentTarget;\n\n        if (e.propertyName === 'height') {\n          self.style.removeProperty('height');\n        }\n      });\n    });\n  });\n})());\n;// CONCATENATED MODULE: ./src/ts/modules/Classes/_FormValidation-module.ts\nfunction _FormValidation_module_slicedToArray(arr, i) { return _FormValidation_module_arrayWithHoles(arr) || _FormValidation_module_iterableToArrayLimit(arr, i) || _FormValidation_module_unsupportedIterableToArray(arr, i) || _FormValidation_module_nonIterableRest(); }\n\nfunction _FormValidation_module_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _FormValidation_module_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _FormValidation_module_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _FormValidation_module_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _FormValidation_module_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _FormValidation_module_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _FormValidation_module_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _FormValidation_module_arrayLikeToArray(o, minLen); }\n\nfunction _FormValidation_module_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _FormValidation_module_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _FormValidation_module_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _FormValidation_module_createClass(Constructor, protoProps, staticProps) { if (protoProps) _FormValidation_module_defineProperties(Constructor.prototype, protoProps); if (staticProps) _FormValidation_module_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _FormValidation_module_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* harmony default export */ var _FormValidation_module = ((function () {\n  var FormValidation = /*#__PURE__*/function () {\n    function FormValidation(form) {\n      var _this = this;\n\n      _FormValidation_module_classCallCheck(this, FormValidation);\n\n      _FormValidation_module_defineProperty(this, \"form\", void 0);\n\n      _FormValidation_module_defineProperty(this, \"isInvalid\", void 0);\n\n      _FormValidation_module_defineProperty(this, \"inputs\", void 0);\n\n      _FormValidation_module_defineProperty(this, \"validate\", {\n        /**\n         * 文字数が足りているか\n         * @param _input 対象のテキストフィールド\n         * @returns エラーメッセージ\n         */\n        minLength: function minLength(_input) {\n          if (_input.getAttribute('minLength') === null) return '';\n          var minlength = Number(_input.getAttribute('minlength'));\n          return minlength <= _input.value.trim().length ? '' : \"\".concat(minlength, \"\\u6587\\u5B57\\u4EE5\\u4E0A\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n        },\n\n        /**\n         * 文字数が超えていないか\n         * @param _input 対象のテキストフィールド\n         * @returns エラーメッセージ\n         */\n        maxLength: function maxLength(_input) {\n          if (_input.getAttribute('maxLength') === null) return '';\n          var maxlength = Number(_input.getAttribute('maxlength'));\n\n          _input.removeAttribute('maxLength');\n\n          return _input.value.trim().length <= maxlength ? '' : \"\".concat(maxlength, \"\\u6587\\u5B57\\u4EE5\\u4E0B\\u3067\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\");\n        },\n\n        /**\n         * 必須項目が入力されているか\n         * @param _formControls 対象のフォームコントロール\n         * @returns エラーメッセージ\n         */\n        required: function required(_formControls) {\n          if (!_formControls.required) return '';\n\n          if (_formControls.type === 'checkbox') {\n            var input = _formControls;\n            return input.checked ? '' : 'このフィールドは入力必須です。';\n          } else if (_formControls.type === 'radio') {\n            var isChecked = _this.form.querySelectorAll(\"input[type=\\\"radio\\\"][name=\\\"\".concat(_formControls.name, \"\\\"]:checked\")).length > 0;\n            return isChecked ? '' : 'このフィールドは入力必須です。';\n          }\n\n          if (_formControls.value.trim() === '') return 'このフィールドは入力必須です。';\n          return '';\n        },\n\n        /**\n         * pattern属性のルールに適合しているか\n         * @param _input 対象のテキストフィールド（必須項目）\n         * @returns エラーメッセージ\n         */\n        pattern: function pattern(_input) {\n          if (_input.getAttribute('pattern') === null || !_input.required) return '';\n          var input = _input; // pattern属性を許容させる\n\n          var pattern = new RegExp(input.pattern);\n\n          if (pattern.test(input.value)) {\n            return '';\n          } // title属性に説明があればそれを出力する\n\n\n          return input.title || '指定されている形式で入力してください。';\n        }\n      });\n\n      _FormValidation_module_defineProperty(this, \"addEvents\", function () {\n        _this.inputs.forEach(function (input) {\n          input.addEventListener('change', function (e) {\n            _this.getHandler(e.currentTarget);\n          });\n        });\n\n        var submit = document.getElementById('submit');\n        if (submit === null) return;\n        submit.addEventListener('click', function (e) {\n          e.preventDefault();\n\n          _this.inputs.forEach(function (input) {\n            _this.getHandler(input);\n          });\n\n          var _iterator = _FormValidation_module_createForOfIteratorHelper(_this.isInvalid),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _step$value = _FormValidation_module_slicedToArray(_step.value, 2),\n                  input = _step$value[0],\n                  state = _step$value[1];\n\n              if (state) {\n                input.focus();\n                return false;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          _this.form.submit();\n        });\n      });\n\n      this.form = form;\n      this.isInvalid = new Map();\n    }\n\n    _FormValidation_module_createClass(FormValidation, [{\n      key: \"setInputElms\",\n      value: function setInputElms(inputs) {\n        this.inputs = inputs;\n      }\n    }, {\n      key: \"setAria\",\n      value: function setAria() {\n        this.inputs.forEach(function (input) {\n          if (input.required) {\n            input.setAttribute('aria-required', 'true');\n          }\n        });\n      }\n      /**\n       * 出力するエラーメッセージのhtmlを生成する\n       * @param {Array<'' | string>} messages エラーメッセージが格納された配列\n       * @returns {string} 空文字列を除外し`<br>`で区切ったhtml\n       */\n\n    }, {\n      key: \"generateErrorHTML\",\n      value: function generateErrorHTML(messages) {\n        if (messages.length === 0) return '';\n        return messages.filter(function (message) {\n          return message !== '';\n        }).join('<br>');\n      }\n      /**\n       * エラーIDの取得\n       * - `:type=radio`の場合グループのエラーIDを取得\n       * - エラーIDが設定されていない場合inputのid属性を取得\n       * @param {FormControls} input 対象のinput要素\n       * @returns {string} エラーID\n       */\n\n    }, {\n      key: \"getErrorId\",\n      value: function getErrorId(input) {\n        var radioGroupError = input.getAttribute('data-radio-group-error');\n        if (radioGroupError !== null) return radioGroupError;\n        var errorId = input.getAttribute('[data-error-id]');\n\n        if (errorId !== null) {\n          errorId = \"\".concat(errorId, \"-error\");\n        } else {\n          //TODO id属性がないinputの場合どうする？name属性からerror参照させる方がよさげ？\n          errorId = \"\".concat(input.id, \"-error\");\n        }\n\n        return errorId;\n      }\n    }, {\n      key: \"resetAllError\",\n      value: function resetAllError(input) {\n        var type = input.type;\n        var inputElms = type === 'radio' ? this.form.querySelectorAll(\"input[type=\\\"radio\\\"][name=\\\"\".concat(input.name, \"\\\"]\")) : [input];\n        var errorId = this.getErrorId(input);\n        var errorMessageArea = document.getElementById(errorId);\n        var labels = document.querySelectorAll(\"[for=\\\"\".concat(input.id, \"\\\"]\")); // エラー文言の削除\n\n        if (errorMessageArea !== null) {\n          errorMessageArea.classList.remove('is-error');\n          errorMessageArea.textContent = '';\n        } // inputのエラー状態解除\n\n\n        inputElms.forEach(function (input) {\n          input.classList.remove('is-error');\n        }); // labelのエラー状態解除\n\n        labels.forEach(function (label) {\n          label.classList.remove('is-error');\n        });\n      }\n    }, {\n      key: \"getHandler\",\n      value: function getHandler(input) {\n        var errorId = this.getErrorId(input);\n        var errorMessageArea = document.getElementById(errorId);\n        var labels = document.querySelectorAll(\"[for=\\\"\".concat(input.id, \"\\\"]\"));\n        var arr = [];\n        Object.values(this.validate).forEach(function (methods) {\n          arr.push(methods(input));\n        });\n        var errorMessage = this.generateErrorHTML(arr); // const errorMessage = this.generateErrorHTML([\n        // \tthis.validate.minLength(input),\n        // \tthis.validate.maxLength(input),\n        // \tthis.validate.required(input),\n        // \tthis.validate.pattern(input),\n        // ]);\n\n        if (errorMessage !== '') {\n          // invalid\n          this.isInvalid.set(input, true);\n          input.classList.add('is-error'); // labelに.is-error付与\n\n          labels.forEach(function (label) {\n            label.classList.add('is-error');\n          });\n\n          if (errorMessageArea !== null) {\n            errorMessageArea.classList.add('is-error');\n            errorMessageArea.innerHTML = errorMessage;\n          } else {\n            // errorMessageが空で、isValidがfalseの時は、他に不正な入力項目があるケース\n            this.isInvalid.set(input, false);\n            input.classList.remove('is-error');\n          }\n        } else {\n          // valid\n          this.isInvalid.set(input, false);\n          this.resetAllError(input);\n        }\n      }\n    }]);\n\n    return FormValidation;\n  }();\n\n  window.addEventListener('DOMContentLoaded', function () {\n    document.querySelectorAll('[data-form-validation]').forEach(function (form) {\n      var formValidation = new FormValidation(form);\n      var inputs = form.querySelectorAll('input, textarea, select');\n      if (inputs.length === 0) return;\n      formValidation.setInputElms(inputs);\n      formValidation.setAria();\n      formValidation.addEvents();\n    });\n  });\n})());\n;// CONCATENATED MODULE: ./src/ts/main.ts\n\n\n // import './modules/Class/_Modal'\n\n\n\n // import { swiper } from './modules/_swiper';\n\n\n\n\n\n\n\ninit();\nheaderStyleChanger();\nGlobalMenu(); // swiper();\n\nbtnPressToDisabled();\n\n\n//# sourceURL=webpack://pon-d/./src/ts/main.ts_+_16_modules?")}},__webpack_exports__={};__webpack_modules__[904]()})();